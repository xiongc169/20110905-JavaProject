<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

    <bean id="user_01" class="org.practice.spring.domain.User" lazy-init="false" init-method="init" destroy-method="destroy">
        <property name="iid" value="iid_001"></property>
        <property name="userNo" value="userNo_001"></property>
        <property name="name" value="name_001"></property>
        <property name="orgNo" value="orgNo_001"></property>
        <property name="orgName" value="orgName_001"></property>
    </bean>

    <bean id="user_02" class="org.practice.spring.domain.User" lazy-init="false" init-method="init" destroy-method="destroy">
        <property name="iid" value="${iid}"></property>
        <property name="userNo" value="${userNo}"></property>
        <property name="name" value="${name}"></property>
        <property name="orgNo" value="${orgNo}"></property>
        <property name="orgName" value="${orgName}"></property>
    </bean>

    <bean id="customer_01" class="org.practice.spring.domain.Customer" autowire="byName">
        <constructor-arg index="0" value="customerId_001"></constructor-arg>
        <constructor-arg index="1" value="customerName_001"></constructor-arg>
    </bean>

    <bean id="customer_02" class="org.practice.spring.domain.Customer" autowire="byName">
        <constructor-arg index="0" value="customerId_002"></constructor-arg>
        <constructor-arg index="1" value="customerName_002"></constructor-arg>
        <property name="car" ref="car_02"></property>
    </bean>

    <bean id="car_01" class="org.practice.spring.domain.Car">
        <property name="carId" value="carId_001"></property>
        <property name="carBrandName" value="carBrandName_001"></property>
        <property name="carModelName" value="carModelName_001"></property>
    </bean>

    <bean id="car_02" class="org.practice.spring.domain.Car">
        <property name="carId" value="carId_002"></property>
        <property name="carBrandName" value="carBrandName_002"></property>
        <property name="carModelName" value="carModelName_002"></property>
    </bean>

    <!--ApplicationContext容器中会自动替换，BeanFactory容器中需手动配置-->
    <!--BeanFactoryPostProcessor，注意与下面的BeanPostProcessor区别-->
    <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:config.properties</value>
        </property>
    </bean>

    <!--启动注解，@Autowired、@Qualifier | @Resource、@PostConstruct、@PreDestroy等注解变为可用-->
    <!--<context:annotation-config> 不但把 AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor 注册到容器，同时还把 PersistenceAnnotationBeanPostProcessor、RequiredAnnotationBeanPostProcessor 一并注册-->
    <!--优化了Bean之间依赖关系的配置：从XML配置改进为注解配置-->
    <context:annotation-config></context:annotation-config>

    <!--启动注解，@Component、@Repository、@Service、@Controller等注解变为可用-->
    <!--<context:component-scan>将 AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor 一并注册到了容器中-->
    <!--优化了Bean的定义：从XML中定义改进为注解定义-->
    <!--<context:component-scan base-package="org.practice.spring.domain"></context:component-scan>-->
    <context:component-scan base-package="org.practice.spring.domain2"></context:component-scan>

</beans>